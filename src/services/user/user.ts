/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.17
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  User,
  LoginUserParams
} from '../../model'
import { customInstance } from '../../../axios.config';
import type { ErrorType } from '../../../axios.config';


/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export const createUser = (
    user: User,
 ) => {
      return customInstance<unknown>(
      {url: `/user`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      );
    }
  


    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = User
    export type CreateUserMutationError = ErrorType<User>

    export const useCreateUser = <TError = ErrorType<User>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof createUser>>, TError, {data: User}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * Creates list of users with given input array
 * @summary Creates list of users with given input array
 */
export const createUsersWithListInput = (
    user: User[],
 ) => {
      return customInstance<User>(
      {url: `/user/createWithList`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      );
    }
  


    export type CreateUsersWithListInputMutationResult = NonNullable<Awaited<ReturnType<typeof createUsersWithListInput>>>
    export type CreateUsersWithListInputMutationBody = User[]
    export type CreateUsersWithListInputMutationError = ErrorType<void>

    export const useCreateUsersWithListInput = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUsersWithListInput>>, TError,{data: User[]}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUsersWithListInput>>, {data: User[]}> = (props) => {
          const {data} = props ?? {};

          return  createUsersWithListInput(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof createUsersWithListInput>>, TError, {data: User[]}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * @summary Logs user into the system
 */
export const loginUser = (
    params?: LoginUserParams,
 signal?: AbortSignal
) => {
      return customInstance<string>(
      {url: `/user/login`, method: 'get',
        params, signal
    },
      );
    }
  

export const getLoginUserQueryKey = (params?: LoginUserParams,) => [`/user/login`, ...(params ? [params]: [])];

    
export type LoginUserQueryResult = NonNullable<Awaited<ReturnType<typeof loginUser>>>
export type LoginUserQueryError = ErrorType<void>

export const useLoginUser = <TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<void>>(
 params?: LoginUserParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLoginUserQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof loginUser>>> = ({ signal }) => loginUser(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof loginUser>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Logs out current logged in user session
 */
export const logoutUser = (
    
 signal?: AbortSignal
) => {
      return customInstance<unknown>(
      {url: `/user/logout`, method: 'get', signal
    },
      );
    }
  

export const getLogoutUserQueryKey = () => [`/user/logout`];

    
export type LogoutUserQueryResult = NonNullable<Awaited<ReturnType<typeof logoutUser>>>
export type LogoutUserQueryError = ErrorType<void>

export const useLogoutUser = <TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLogoutUserQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof logoutUser>>> = ({ signal }) => logoutUser(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof logoutUser>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Get user by user name
 */
export const getUserByName = (
    username: string,
 signal?: AbortSignal
) => {
      return customInstance<User>(
      {url: `/user/${username}`, method: 'get', signal
    },
      );
    }
  

export const getGetUserByNameQueryKey = (username: string,) => [`/user/${username}`];

    
export type GetUserByNameQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByName>>>
export type GetUserByNameQueryError = ErrorType<void>

export const useGetUserByName = <TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<void>>(
 username: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByNameQueryKey(username);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByName>>> = ({ signal }) => getUserByName(username, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getUserByName>>, TError, TData>({ queryKey, queryFn, enabled: !!(username), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * This can only be done by the logged in user.
 * @summary Update user
 */
export const updateUser = (
    username: string,
    user: User,
 ) => {
      return customInstance<unknown>(
      {url: `/user/${username}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      );
    }
  


    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = User
    export type UpdateUserMutationError = ErrorType<void>

    export const useUpdateUser = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{username: string;data: User}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {username: string;data: User}> = (props) => {
          const {username,data} = props ?? {};

          return  updateUser(username,data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateUser>>, TError, {username: string;data: User}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export const deleteUser = (
    username: string,
 ) => {
      return customInstance<unknown>(
      {url: `/user/${username}`, method: 'delete'
    },
      );
    }
  


    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = ErrorType<void>

    export const useDeleteUser = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{username: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {username: string}> = (props) => {
          const {username} = props ?? {};

          return  deleteUser(username,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteUser>>, TError, {username: string}, TContext>(mutationFn, mutationOptions);
    }
    